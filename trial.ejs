const confirmPayment = async (req, res) => {
    try {
        const userId = req.session.user?._id || req.body.userId;
        console.log("Extracted userId:", userId);
        console.log("Received Checkout Data:", req.body);

        if (!userId) {
            console.error("User ID is missing from session or request.");
            return res.status(400).json({ success: false, error: "User not logged in." });
        }

        const { addressId, cartItems, productId, quantity, grandTotal, paymentMethod } = req.body;

        if (!addressId || !grandTotal || !paymentMethod) {
            return res.status(400).json({ success: false, error: 'Missing required fields' });
        }

        const validPaymentMethods = ['cod', 'credit_card', 'paypal'];
        if (!validPaymentMethods.includes(paymentMethod)) {
            return res.status(400).json({ success: false, error: 'Invalid payment method' });
        }

        let orderItems = [];

        if (cartItems && cartItems.length > 0) {
            orderItems = cartItems.map(item => ({
                product: item.product._id,
                quantity: item.quantity,
                price: item.price
            }));
        } else if (productId && quantity) {
            const product = await Product.findById(productId);
            if (!product) {
                return res.status(404).json({ success: false, error: 'Product not found' });
            }
            if (product.stock < quantity) {
                return res.status(400).json({ success: false, error: 'Insufficient stock' });
            }
            orderItems.push({
                product: productId,
                quantity: quantity,
                price: product.price * quantity
            });
        } else {
            return res.status(400).json({ success: false, error: 'Invalid order data' });
        }

        const finalAmount = grandTotal;

        const newOrder = new Order({
            userId: userId,  // ✅ Fixed field name
            orderItems: orderItems,
            totalPrice: grandTotal,
            paymentMethod: paymentMethod,
            finalAmount: finalAmount,
            address: addressId,
            status: 'Pending',
            createdAt: new Date(),
            invoiceDate: new Date()
        });

        const savedOrder = await newOrder.save();

        for (const item of orderItems) {
            await Product.findByIdAndUpdate(
                item.product,
                { $inc: { stock: -item.quantity } }  // ✅ Fixed stock decrement
            );
        }

        await User.findByIdAndUpdate(userId, {
            $push: { orderHistory: savedOrder._id }
        });

        console.log('Order saved successfully:', savedOrder);

        res.status(200).json({ success: true, orderId: savedOrder._id });
    } catch (error) {
        console.error('Error processing payment:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
};