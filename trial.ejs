<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign Up - Gym Rats</title>
  <link rel="stylesheet" href="signup.css">
   <link rel="stylesheet" href="styles.css">
   <!-- Add Font Awesome for icons -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  
</head>
<body>
  <!-- Include Header -->
  <%- include('../../views/partials/user/header') %>

  <!-- Signup Form -->
  <div class="form-container">
    <h2>Create Account</h2>

    <% if (messages && messages.error) { %>
      <div class="error-messages">
        <% messages.error.forEach((error) => { %>
          <p><%= error %></p>
        <% }) %>
      </div>
    <% } %>

    <form action="/signup" method="POST">
      <input type="text" name="name" placeholder="Full Name" required>
      <input type="email" name="email" placeholder="Email Address" required>
      <input type="tel" name="phone" placeholder="Phone Number" required>
      <input type="password" name="password" placeholder="Password" required>
      <input type="password" name="confirmPassword" placeholder="Confirm Password" required>
      <button type="submit">Create Account</button>
    </form>

    <!-- Sign up with Google -->
    <div class="google-signup">
      <p>or</p>
      <button onclick="window.location.href='/auth/google'">
        <img src="https://www.gstatic.com/images/branding/googlelogo/svg/googlelogo_clr_74x24px.svg" alt="Google Logo">

        Sign up with Google
      </button>
    </div>

    <!-- Already have an account? Login link -->
    <div class="login-link">
      <p>Already have an account? <a href="/login">Login</a></p>
    </div>
  </div>

  <!-- Include Footer -->
  <%- include('../../views/partials/user/footer') %>
</body>
</html>

//------------------------------------------------------------------------------

const User =require("../../models/userSchema")
const bcrypt = require("bcrypt");
const { sendOTPEmail } = require("../../services/emailService");
const { generateOTP,validateInput, ERROR_MESSAGES } = require("../../utils/validation");



const pageNotfound=async(req,res)=>{
    try{
        return res.render('user/pageNotfound')
    }catch(error){
        console.log('something gone wrong');
        res.status(500).send('Server error')
    }
}

//---------------------------------------------------

  

//---------------------------------------------------
const loadSignup=async(req,res)=>{
    try{

        return res.render('user/signup',{messages:{}})

    }catch(error){
        console.log('signup page not found');
        res.status(500).send('Server error')
    }
}

//---------------------------------------------------
const loadLogin=async(req,res)=>{
    try{
    if(!req.session.user){
        return res.render('user/login',{message:''})
    }else{
        res.redirect('/')
    }

    }catch(error){
        console.log('login page not found');
        res.redirect('pageNotfound')
    }
}
//---------------------------------------------------
const signup = async (req, res) => {
    try {
      const { name, email, phone, password, confirmPassword } = req.body;
  
     
      const errors = validateInput(name, email, phone, password, confirmPassword);
      if (errors.length > 0) {
        return res.render("user/signup", { messages: { error: errors } });
      }
  
    
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.render("user/signup", { messages: { error: [ERROR_MESSAGES.EMAIL_EXISTS] } });
      }
  
     
      const otp = generateOTP();
      req.session.otpData = { name, email, phone, password, otp, timestamp: Date.now() };
  
      console.log(otp)
      req.session.save((err) => {
        if (err) {
          console.error("Error saving session:", err);
          return res.status(500).render("user/signup", { messages: { error: [ERROR_MESSAGES.SERVER_ERROR] } });
        }
  
       
        sendOTPEmail(email, otp)
          .then(() => {
            res.render("user/otp-verification", { messages: { success: "OTP sent to your email!" } });
          })
          .catch((error) => {
            console.error("Error sending OTP:", error);
            res.status(500).render("user/signup", { messages: { error: [ERROR_MESSAGES.SERVER_ERROR] } });
          });
      });
    } catch (error) {
      console.error("Error during signup:", error);
      res.status(500).render("user/signup", { messages: { error: [ERROR_MESSAGES.SERVER_ERROR] } });
    }
  };
  
  //---------------------------------------------------
  const resendOtp = async (req, res) => {
    try {
      const otpData = req.session.otpData;
  
      if (!otpData) {
        return res.json({ success: false, message: "No OTP data found!" });
      }
  
    
      const newOtp = generateOTP();
      req.session.otpData.otp = newOtp;
      req.session.otpData.timestamp = Date.now(); 

  
    
      await sendOTPEmail(otpData.email, newOtp);
      console.log(newOtp)
  
      res.json({ success: true, message: "New OTP sent to your email!" });
    } catch (error) {
      console.error("Error resending OTP:", error);
      res.status(500).json({ success: false, message: "Failed to resend OTP. Please try again!" });
    }
  };
    //---------------------------------------------------
 
  const verifyOtp = async (req, res) => {
    try {
      const { otp } = req.body;
      const otpData = req.session.otpData;
  
      
      if (!otpData || Date.now() - otpData.timestamp > 1 * 60 * 1000) {
        return res.json({ success: false, message: "Invalid or expired OTP!" });
      }
  
     
      if (otpData.otp !== otp) {
        return res.json({ success: false, message: "Invalid OTP!" });
      }
  
     
      const hashedPassword = await bcrypt.hash(otpData.password, 10);
  
      
      const newUser = new User({
        name: otpData.name,
        email: otpData.email,
        phone: otpData.phone,
        password: hashedPassword,
      });
      await newUser.save();
  
     
      req.session.otpData = null;
  
      res.json({ success: true, message: "OTP verified successfully! Redirecting to login..." });
    } catch (error) {
      console.error("Error verifying OTP:", error);
      res.status(500).json({ success: false, message: "Internal Server Error. Please try again!" });
    }
  };

  //---------------------------------------------------
  const login = async (req, res) => {
    try {
      const { email, password } = req.body;
      const findUser = await User.findOne({ isAdmin: 0, email: email });
  
      if (!findUser) {
        return res.render('user/login', { message: 'User not found' });
      }
  
      if (findUser.isBlocked) {
        return res.render('user/login', { message: 'User Blocked by admin' });
      }
  
      const passwordMatch = await bcrypt.compare(password, findUser.password);
      if (!passwordMatch) {
        return res.render('user/login', { message: 'Incorrect Password' });
      }
  
      req.session.user = {
        
          _id: findUser._id,
          username:findUser.name,
          email:findUser.email
     }
      res.redirect('/');
      console.log(req.session.user); 
    } catch (error) {
      console.error('Login error', error);
      res.render('user/login', { message: 'Login failed. Please try again later' });
    }
  };
//---------------------------------------------------
const loadHomepage = async (req, res) => {
    try {
      const user = req.session.user;  
      
      if (user) {
       
        res.render('user/home', { user: user });
      } else {
       
        res.render('user/home', { user: null });
      }
    } catch (error) {
      console.log('Error loading homepage:', error);
      res.status(500).send('Server error');
    }
  };
  //------------------------------------------------------
const logout =  async (req,res)=>{
    try{
        req.session.destroy((err)=>{
            if(err){
                console.log('Session destruction error',err)
                return res.redirect('/pageNotFound')
            }
            return res.redirect('/login')
        })
    }
    catch(error){
        console.log('Logout error')
        res.redirect('/pageNotfound')
    }
}

//---------------------------------------------------

//---------------------------------------------------


  
module.exports ={
    pageNotfound,
    loadHomepage,
    loadSignup,
    loadLogin,
    signup,
    resendOtp,
    verifyOtp,
    login,
    logout,
   
    // handleForgotPassword,
    // verifyForgotPasswordOtp,
    // resetPassword,
    // loadResetPassword,
    // resendForgetotp
}//------------------------------------------------------------------------------



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OTP Verification</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    /* General Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #000000, #333333);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      color: #fff;
    }

    .otp-container {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 40px;
      width: 100%;
      max-width: 400px;
      text-align: center;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      animation: fadeIn 1s ease-in-out;
    }

    .otp-container h2 {
      font-size: 24px;
      margin-bottom: 20px;
      color: #ffcc00;
    }

    .otp-container p {
      font-size: 14px;
      margin-bottom: 30px;
      color: #e0e0e0;
    }

    .otp-inputs {
      display: flex;
      justify-content: space-between;
      margin-bottom: 30px;
    }

    .otp-inputs input {
      width: 50px;
      height: 50px;
      text-align: center;
      font-size: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 10px;
      background: transparent;
      color: #fff;
      outline: none;
      transition: all 0.3s ease;
    }

    .otp-inputs input:focus {
      border-color: #ffcc00;
      transform: scale(1.1);
    }

    .otp-container button {
      width: 100%;
      padding: 15px;
      background: #ffcc00;
      border: none;
      border-radius: 10px;
      color: #000;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .otp-container button:hover {
      background: #e6b800;
    }

    .otp-container .resend-otp {
      margin-top: 20px;
      font-size: 14px;
      color: #e0e0e0;
    }

    .otp-container .resend-otp a {
      color: #ffcc00;
      text-decoration: none;
      font-weight: bold;
    }

    .otp-container .resend-otp a:hover {
      text-decoration: underline;
    }

    /* Glamorous Popup Styles */
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);
      z-index: 1000;
      color: #000;
      text-align: center;
      animation: float 3s ease-in-out infinite;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .popup.success {
      background: linear-gradient(135deg, #FFCF10, #FFCF10);
      color: #fff;
    }

    .popup.error {
      background: linear-gradient(135deg, #f44336, #e57373);
      color: #000000;
    }

    .popup p {
      font-size: 18px;
      margin-bottom: 20px;
    }

    .popup button {
      padding: 10px 20px;
      background: #000000;
      border: none;
      border-radius: 10px;
      color: #ffffff;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .popup button:hover {
      background: #000000;
    }

    /* Floating Animation */
    @keyframes float {
      0%, 100% {
        transform: translate(-50%, -50%) translateY(0);
      }
      50% {
        transform: translate(-50%, -50%) translateY(-10px);
      }
    }

    /* Fade-In Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
</head>
<body>
  <div class="otp-container">
    <h2>OTP Verification</h2>
    <p>Enter the 6-digit OTP sent to your email.</p>

    <form id="otpForm">
      <div class="otp-inputs">
        <input type="text" name="otp1" maxlength="1" required autofocus>
        <input type="text" name="otp2" maxlength="1" required>
        <input type="text" name="otp3" maxlength="1" required>
        <input type="text" name="otp4" maxlength="1" required>
        <input type="text" name="otp5" maxlength="1" required>
        <input type="text" name="otp6" maxlength="1" required>
      </div>

      <button type="submit">Verify OTP</button>
    </form>

    <div class="resend-otp">
      <p id="timerDisplay"></p>
      <button id="resendOtpLink" disabled>Resend OTP</button>
  </div>
  </div>

  <!-- Glamorous Popup for Messages -->
  <div id="popup" class="popup">
    <p id="popupMessage"></p>
    <button onclick="closePopup()">Close</button>
  </div>

  <script>
   document.addEventListener('DOMContentLoaded', () => {
    const otpForm = document.getElementById('otpForm');
    const resendOtpLink = document.getElementById('resendOtpLink');
    const timerDisplay = document.getElementById('timerDisplay');
    const popup = document.getElementById('popup');
    const popupMessage = document.getElementById('popupMessage');
    const closePopupBtn = document.getElementById('closePopupBtn');
    const OTP_EXPIRY_TIME = 60;

    //------------------------------------

    const inputs = document.querySelectorAll('.otp-inputs input');
    inputs.forEach((input, index) => {
      input.addEventListener('input', () => {
        if (input.value.length === 1 && index < inputs.length - 1) {
          inputs[index + 1].focus();
        }
      });

      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && index > 0 && input.value.length === 0) {
          inputs[index - 1].focus();
        }
      });
    });
    //--------------------------------
  
    document.getElementById('otpForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const otp = Array.from(inputs).map(input => input.value).join('');
      const response = await fetch('/verify-otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ otp }),
      });

      const result = await response.json();
      if (result.success) {
        showPopup(result.message, 'success');
        setTimeout(() => {
          window.location.href = '/login'; 
        }, 2000);
      } else {
        showPopup(result.message, 'error');
      }
    });

   //------------------------------------------------------
    document.getElementById('resendOtpLink').addEventListener('click', async (e) => {
      e.preventDefault();

      const response = await fetch('/resend-otp', {
        method: 'POST',
      });

      const result = await response.json();
      if (result.success) {
        showPopup(result.message, 'success');
      } else {
        showPopup(result.message, 'error');
      }
    });

    
    function showPopup(message, type) {
        popupMessage.textContent = message;
        popup.classList.remove("success", "error");
        popup.classList.add(type);
        popup.style.display = "block";
    }

    closePopupBtn.addEventListener('click', () => {
        popup.style.display = "none";
    });
});

  </script>
</body>
</html>