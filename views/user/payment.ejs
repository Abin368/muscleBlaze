<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MuscleBlaze</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/drift-zoom/dist/drift-basic.min.css">
    <link rel="stylesheet" href="payment.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <%- include('../../views/partials/user/header') %>
    <div class="breadcrumbs">
        <a href="/">Home</a>  <span>Payment</span>
    </div>

    
    <div class="payment-container">
        <!-- <div class="order-summary">
            <h2>Order Summary</h>
                <ul>
                    <% checkoutData.cartItems.forEach(item => { %>
                        <li class="cart-item">
                            <div class="item-info">
                                <strong class="product-name"><%= item.product.productName %></strong>
                                <span class="quantity">Qty: <%= item.quantity %></span>
                            </div>
                            <span class="price">₹<%= item.totalPrice %></span>
                        </li>
                    <% }); %>
                </ul>
            <h3>Total: ₹<%= checkoutData.grandTotal %></h3>
        </div> -->
        

        <div class="order-summary">
            <h2>Order Summary</h2>
            <% if (checkoutData && checkoutData.cartItems && checkoutData.cartItems.length > 0) { %>
                <ul>
                    <% checkoutData.cartItems.forEach(item => { %>
                        <li class="cart-item">
                            <div class="item-info">
                                <strong class="product-name"><%= item.product.productName %></strong>
                                <span class="quantity">Qty: <%= item.quantity %></span>
                            </div>
                            <span class="price">₹<%= item.totalPrice.toFixed(2) %></span>
                        </li>
                    <% }); %>
                </ul>
                
                <p><strong>Original Total:</strong> ₹<span id="originalTotal"><%= checkoutData.originalTotal.toFixed(2) %></span></p>
        
                <% if (checkoutData.discount && checkoutData.discount > 0) { %>
                    <p id="couponApplied"><strong>Coupon Applied:</strong> <%= checkoutData.couponCode %></p>
                    <p><strong>Discount:</strong> - ₹<span id="discountAmount"><%= checkoutData.discount.toFixed(2) %></span></p>
                <% } else { %>
                    <p id="couponApplied"><strong>Coupon Applied:</strong> None</p>
                    <p><strong>Discount:</strong> - ₹<span id="discountAmount">0.00</span></p>
                <% } %>
        
                <h3>Final Payable Amount: ₹<%= checkoutData.grandTotal.toFixed(2) %></h3>
            <% } else { %>
                <p>No items in cart.</p>
            <% } %>
        </div>
        







        <div class="payment-options">
            <h2>Choose Payment Method</h2>
            
            <div class="address-section">
                <h3>Delivery Address</h3>
                <div class="address-box">
                    <p><strong><%= checkoutData.address.name %></strong></p>
                    <p><%= checkoutData.address.city %>, <%= checkoutData.address.district %>, <%= checkoutData.address.state %></p>
                    <p>Pincode: <%= checkoutData.address.pincode %></p>
                    <p>Phone: <%= checkoutData.address.phone %></p>
                  
                </div>
            </div>
        
        <div id="checkout-data"
            data-user-id="<%= checkoutData.userId %>" 
            data-address-id="<%= checkoutData.address._id %>"
            data-cart-items='<%= JSON.stringify(checkoutData.cartItems) %>'
            data-grand-total="<%= checkoutData.grandTotal %>"
            data-quantity="<%= checkoutData.cartItems.reduce((sum, item) => sum + item.quantity, 0) %>"
            data-coupon-code="<%= checkoutData.couponCode || '' %>"

       ></div>
       

            <div class="payment-methods">
                <button class="payment-btn" onclick="selectPayment('razorpay')">Pay Using UPI</button>
                <button class="payment-btn" onclick="selectPayment('cod')">Cash on Delivery</button>
                <button class="payment-btn" onclick="selectPayment('wallet')">Wallet</button>
            </div>
            
            <div id="cod-section" style="display: none;">
                <button class="pay-btn" onclick="confirmPayment()">Confirm Payment</button>
            </div>
            
            <div id="razorpay-section" style="display: none;">
                <button class="pay-btn" onclick="confirmPayment()">Proceed with Razorpay</button>
            </div>

            <div id="wallet-section" style="display: none;">
                <button class="pay-btn" onclick="confirmPayment()">Confirm Payment with Wallet</button>
            </div>
            
        </div>
    </div>

    <%- include('../../views/partials/user/footer') %>
</body>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  let paymentMethod = null;

function selectPayment(method) {
    paymentMethod = method;
    document.getElementById('cod-section').style.display = method === 'cod' ? 'block' : 'none';
    document.getElementById('razorpay-section').style.display = method === 'razorpay' ? 'block' : 'none';
    document.getElementById('wallet-section').style.display = method === 'wallet' ? 'block' : 'none';
}

async function confirmPayment() {
    if (!paymentMethod) {
        Swal.fire({
            icon: 'warning',
            title: 'Payment Method Required',
            text: 'Please select a payment method before proceeding!',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK'
        });
        return;
    }

    const checkoutDataElement = document.getElementById('checkout-data');

    if (!checkoutDataElement) {
        Swal.fire({
            icon: 'error',
            title: 'Checkout Data Missing',
            text: 'There was an issue retrieving your checkout data. Please try again.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
        });
        return;
    }

    try {
        const cartItems = checkoutDataElement.getAttribute('data-cart-items');
        const parsedCartItems = cartItems ? JSON.parse(cartItems) : [];

        const checkoutData = {
            userId: checkoutDataElement.getAttribute('data-user-id') || null,
            addressId: checkoutDataElement.getAttribute('data-address-id') || null,
            cartItems: parsedCartItems,
            grandTotal: parseFloat(checkoutDataElement.getAttribute('data-grand-total')) || 0,
            quantity: parseInt(checkoutDataElement.getAttribute('data-quantity')) || 1,
            paymentMethod: paymentMethod,
            couponCode: checkoutDataElement.getAttribute('data-coupon-code') || null
        };

        console.log('Checkout Data:', checkoutData);

        Swal.fire({
            title: 'Processing Payment',
            text: 'Please wait while we process your order...',
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        if (paymentMethod === "cod") {
           
            fetch('/payment/proceed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(checkoutData)
            })
            .then(response => response.json())
            .then(data => {
                Swal.close(); 
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Placed Successfully!',
                        text: 'Redirecting to order summary...',
                        showConfirmButton: false,
                        timer: 2000
                    });
                    setTimeout(() => {
                        window.location.href = `/order-summary/${data.orderId}`;
                    }, 2000);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: data.error || 'Something went wrong. Please try again!',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'Try Again'
                    });
                }
            })
            .catch(error => {
                Swal.close(); 
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error',
                    text: 'There was an issue with your order. Please check your connection and try again.',
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'OK'
                });
            });
        } else if (paymentMethod === "razorpay") {
         
            fetch('/payment/razorpay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(checkoutData)
            })
            .then(response => response.json())
            .then(data => {
                Swal.close(); 
                if (data.success) {
                    sessionStorage.setItem("checkoutData", JSON.stringify(checkoutData));
                    const options = {
                        key: "rzp_test_v6v5TA0H0GYZBO",
                        amount: data.amount,
                        currency: data.currency,
                        order_id: data.razorpayOrderId,
                        prefill: {
                            name: checkoutDataElement.getAttribute('data-user-name') || "Guest User",
                            email: checkoutDataElement.getAttribute('data-user-email') || "guest@example.com",
                            contact: checkoutDataElement.getAttribute('data-user-phone') || "0000000000"
                        },
                        handler: function (response) {
                            console.log("Payment Success:", response);
                            const storedCheckoutData = JSON.parse(sessionStorage.getItem("checkoutData")) || {};

                            fetch("/payment/verify", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    userId: storedCheckoutData.userId,
                                    addressId: storedCheckoutData.addressId,
                                    orderItems: storedCheckoutData.cartItems,
                                    grandTotal: storedCheckoutData.grandTotal,
                                     paymentMethod: "Razorpay"

                                })
                            })
                            .then(res => res.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful!',
                                        text: 'Redirecting to order summary...',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                    setTimeout(() => {
                                        window.location.href = `/order-summary/${data.orderId}`;
                                    }, 2000);
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: 'Your transaction could not be verified.',
                                        confirmButtonColor: '#d33',
                                        confirmButtonText: 'Try Again'
                                    });
                                }
                            });
                        }
                    };

                    const rzp1 = new Razorpay(options);
                    rzp1.open();

                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: data.error || 'Something went wrong. Please try again!',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'Try Again'
                    });
                }
            })
            .catch(error => {
                Swal.close(); 
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error',
                    text: 'There was an issue with your order. Please check your connection and try again.',
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'OK'
                });
            });
        }
//---------------------------
        else if (paymentMethod === "wallet") {
            fetch('/payment/wallet', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(checkoutData)
})
    .then(response => response.json())
    .then(data => {
        Swal.close();
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Payment Successful!',
                text: 'Redirecting to order summary...',
                showConfirmButton: false,
                timer: 2000
            });
            setTimeout(() => {
                window.location.href = `/order-summary/${data.orderId}`;
            }, 2000);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: data.error || 'Insufficient wallet balance!',
                confirmButtonColor: '#d33',
                confirmButtonText: 'Try Another Payment Method'
            });
        }
    })
    .catch(error => {
        Swal.close();
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'There was an issue with your order. Please check your connection and try again.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
        });
    });
}


//---------------------------------------


    } catch (error) {
        console.error("Processing Error:", error);
        Swal.close();
        Swal.fire({
            icon: 'error',
            title: 'Processing Error',
            text: 'There was an issue processing your order. Please try again.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
        });
    }
}

//-------------------------------------------------------------------


</script>
</html>