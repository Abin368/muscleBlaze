<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MuscleBlaze</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/drift-zoom/dist/drift-basic.min.css">
    <link rel="stylesheet" href="payment.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <%- include('../../views/partials/user/header') %>
    <div class="breadcrumbs">
        <a href="/">Home</a>  <span>Payment</span>
    </div>

    
    <div class="payment-container">
        <div class="order-summary">
            <h2>Order Summary</h>
                <ul>
                    <% checkoutData.cartItems.forEach(item => { %>
                        <li class="cart-item">
                            <div class="item-info">
                                <strong class="product-name"><%= item.product.productName %></strong>
                                <span class="quantity">Qty: <%= item.quantity %></span>
                            </div>
                            <span class="price">₹<%= item.totalPrice %></span>
                        </li>
                    <% }); %>
                </ul>
            <h3>Total: ₹<%= checkoutData.grandTotal %></h3>
        </div>
        
        <div class="payment-options">
            <h2>Choose Payment Method</h2>
            
            <div class="address-section">
                <h3>Delivery Address</h3>
                <div class="address-box">
                    <p><strong><%= checkoutData.address.name %></strong></p>
                    <p><%= checkoutData.address.city %>, <%= checkoutData.address.district %>, <%= checkoutData.address.state %></p>
                    <p>Pincode: <%= checkoutData.address.pincode %></p>
                    <p>Phone: <%= checkoutData.address.phone %></p>
                </div>
            </div>
            
            <div id="checkout-data"
            data-address-id="<%= checkoutData.address._id %>"
            data-cart-items='<%= JSON.stringify(checkoutData.cartItems) %>'
            data-grand-total="<%= checkoutData.grandTotal %>"
            data-quantity="<%= checkoutData.cartItems.reduce((sum, item) => sum + item.quantity, 0) %>"
       ></div>

            <div class="payment-methods">
                <button class="payment-btn" onclick="selectPayment('upi')">Pay Using UPI</button>
                <button class="payment-btn" onclick="selectPayment('cod')">Cash on Delivery</button>
                <button class="payment-btn" onclick="selectPayment('card')">Debit/Credit Card</button>
            </div>
            
            <div id="cod-section" style="display: none;">
                <button class="pay-btn" onclick="confirmPayment()">Confirm Payment</button>
            </div>
            
        </div>
    </div>

    <%- include('../../views/partials/user/footer') %>
</body>
<script>
  let paymentMethod = '';

function selectPayment(method) {
    paymentMethod = method;
    document.getElementById('cod-section').style.display = method === 'cod' ? 'block' : 'none';
}

function confirmPayment() {
    if (!paymentMethod) {
        Swal.fire({
            icon: 'warning',
            title: 'Payment Method Required',
            text: 'Please select a payment method before proceeding!',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK'
        });
        return;
    }

    const checkoutDataElement = document.getElementById('checkout-data');

    if (!checkoutDataElement) {
        Swal.fire({
            icon: 'error',
            title: 'Checkout Data Missing',
            text: 'There was an issue retrieving your checkout data. Please try again.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
        });
        return;
    }

    try {
        const cartItems = checkoutDataElement.getAttribute('data-cart-items');
        const parsedCartItems = cartItems ? JSON.parse(cartItems) : [];

        const checkoutData = {
            addressId: checkoutDataElement.getAttribute('data-address-id') || null,
            cartItems: parsedCartItems,
            grandTotal: parseFloat(checkoutDataElement.getAttribute('data-grand-total')) || 0,
            quantity: parseInt(checkoutDataElement.getAttribute('data-quantity')) || 1,
            paymentMethod: paymentMethod
        };

        console.log('Checkout Data:', checkoutData);

        Swal.fire({
            title: 'Processing Payment',
            text: 'Please wait while we process your order...',
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => {
                Swal.showLoading(); 
            }
        });

        fetch('/payment/proceed', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(checkoutData)
        })
        .then(response => response.json())
        .then(data => {
            console.log('Response Data:', data); 

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed Successfully!',
                    text: 'Redirecting to order summary...',
                    showConfirmButton: false,
                    timer: 2000
                });

                setTimeout(() => {
                    window.location.href = `/order-summary/${data.orderId}`;
                }, 2000);
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: data.error || 'Something went wrong. Please try again!',
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'Try Again'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Network Error',
                text: 'There was an issue with your order. Please check your connection and try again.',
                confirmButtonColor: '#d33',
                confirmButtonText: 'OK'
            });
        });

    } catch (error) {
        console.error("Parsing Error:", error);
        Swal.fire({
            icon: 'error',
            title: 'Processing Error',
            text: 'There was an issue processing your order. Please try again.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
        });
    }
}



</script>
</html>