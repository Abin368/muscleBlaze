<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MuscleBlaze</title>
    <link rel="stylesheet" href="styles.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="orders.css">
    <style>
#returnOrderModal {
    display: none; /* Hidden on load */
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    justify-content: center;
    align-items: center;
}


.modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    width: 400px;
}

.return-modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Modal Content */
.return-modal-content {
    background: #fff;
    padding: 20px;
    width: 400px;
    border-radius: 12px;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
    text-align: center;
    animation: fadeIn 0.3s ease-in-out;
    position: relative;
}

/* Close Button */
.return-close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    color: #666;
    cursor: pointer;
    transition: color 0.2s ease;
}

.return-close:hover {
    color: red;
}

/* Title & Description */
.return-title {
    font-size: 22px;
    color: #333;
    margin-bottom: 10px;
}

.return-description {
    color: #555;
    margin-bottom: 15px;
}

/* Form Elements */
.return-label {
    font-weight: 600;
    display: block;
    margin: 10px 0 5px;
    color: #444;
}

.return-textarea {
    width: 100%;
    height: 80px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 6px;
    resize: none;
    font-size: 14px;
}

/* Submit Button */
.return-submit-btn {
    background: #ffcc00;
    color: black;
    font-size: 16px;
    padding: 10px;
    width: 100%;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    margin-top: 15px;
    transition: background 0.3s ease;
}

.return-submit-btn:hover {
    background: #ffcc00;
}

/* Return Items Container */
.return-items-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 15px;
}

/* Individual Return Item */
.return-item {
    display: flex;
    align-items: center;
    gap: 10px;
    background: #f8f9fa;
    padding: 8px;
    border-radius: 6px;
}

/* Checkbox Styling */
.return-checkbox {
    width: 18px;
    height: 18px;
    cursor: pointer;
    accent-color: #ffcc00;
}

/* Return Item Text */
.return-item-text {
    font-size: 14px;
    color: #333;
}

/* Fade-in Animation */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}




/* Modal Wrapper */
.cancel-modal-wrapper {
    display: none; /* Hidden by default */
    position: fixed; /* Fixed position to cover the entire screen */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Darker background */
    z-index: 9999; /* Ensure modal is on top of other content */
    justify-content: center; /* Center the modal content horizontally */
    align-items: center; /* Center the modal content vertically */
    overflow: auto;
    animation: cancelSlideIn 0.5s ease-out;
}

/* Modal Box (Main Modal Container) */
.cancel-modal-box {
    background-color: #fff; /* White background */
    padding: 25px;
    border-radius: 8px;
    max-width: 550px;
    width: 90%; /* Ensure it doesn't overflow on small screens */
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    position: relative;
}

/* Close Button */
.cancel-modal-close {
    position: absolute;
    top: 10px;
    right: 20px;
    font-size: 28px;
    font-weight: bold;
    color: #888;
    cursor: pointer;
}

.cancel-modal-close:hover {
    color: #333;
}

/* Modal Title */
.cancel-modal-title {
    font-size: 26px;
    text-align: center;
    margin-bottom: 20px;
    color: #333;
}

/* Order Item List */
.cancel-order-items-list {
    max-height: 300px;
    overflow-y: auto;
    margin-bottom: 20px;
    padding: 5px;
    border-bottom: 1px solid #eee;
}

.cancel-order-item {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.cancel-order-item input {
    margin-right: 10px;
}

/* Cancel Reason Textarea */



.swal2-container {
    z-index: 99999 !important; /* Make sure it has a higher z-index */
} 
.cancel-button:hover {
    background-color: #e25a4e;
}

.cancel-confirm-cancel-button {
    background-color: #1d87e8; /* Soft blue */
    color: #fff;
    border: none;
}

.cancel-confirm-cancel-button:hover {
    background-color: #1c76c2;
}

/* Animation for Modal Appearance */
@keyframes cancelSlideIn {
    from {
        opacity: 0;
        transform: translateY(-50px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    gap: 10px;
    }

.pagination a {
    text-decoration: none;
    background-color: #ffcc00;
    color: black;
    padding: 8px 15px;
    border-radius: 5px;
    transition: background 0.3s ease-in-out;
    font-size: 14px;
}

.pagination a:hover {
    background-color: #e67e22;
}

.pagination span {
    font-size: 16px;
    font-weight: bold;
    color: #333;
}

.pagination .prev,
.pagination .next {
    font-weight: bold;
}

    </style>
</head>

<body>
    <%- include('../../views/partials/user/header') %>

        <div class="profile-container">
            <%- include('../../views/partials/user/profileSidebar') %>

                <div class="orders-container">
                    <h1>Your Orders</h1>

                    <% if (orders.length===0) { %>
                        <p>No orders found.</p>
                        <% } else { %>
                            <% orders.forEach(order=> { %>
                                <div class="order-card">
                                    <!-- Left side: Products -->
                                    <div class="order-left">
                                        <% order.orderItems.forEach(item=> { %>
                                            <div class="product-info">
                                                <img src="/uploads/product-images/<%= item.product.productImage[0] || 'default-image.jpg' %>"
                                                    alt="<%= item.product.name %>"
                                                    style="width: 150px; height: 150px; object-fit: cover; border-radius: 10px;">

                                                <div class="details">
                                                    <h4>
                                                        <%= item.product.productName %>
                                                    </h4>
                                                    <p><strong>Weight:</strong>
                                                        <%= item.product.size %>Kg
                                                    </p>
                                                    <p><strong>Flavor:</strong>
                                                        <%= item.product.flavor %>
                                                    </p>
                                                </div>
                                            </div>
                                            <% }) %>
                                    </div>


                                    <div class="order-right">
                                        <h4>Order ID: <%= order.orderId %>
                                        </h4>
                                        <p><strong>Status:</strong>
                                            <%= order.status %>
                                        </p>
                                        <p><strong>Total Items:</strong>
                                            <%= order.orderItems.reduce((total, item)=> total + item.quantity, 0) %>
                                        </p>
                                        <p><strong>Total Price:</strong> â‚¹<%= order.finalAmount %>
                                        </p>

                                        <div class="order-actions">

                                            <a href="/order/details/<%= order._id %>" class="btn">View Details</a>

                                            <!-- <% if (order.status !='Cancelled' && order.status!='Delivered' && order.status!='Returned'&& order.status!='Return Requested' &&order.status!='Partially Returned'  ) { %>
                                                <button class="btn cancel"
                                                    onclick="cancelOrder('<%= order._id %>')">Cancel Order</button>
                                                <% } %> -->

                                                <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Returned' && order.status !== 'Return Requested' && order.status !== 'Partially Returned') { %>
                                                    <button class="btn cancel-button"
                                                        data-order-id="<%= order._id %>"
                                                        data-order-items="<%- encodeURIComponent(JSON.stringify(order.orderItems)) %>"
                                                        onclick="openCancelModal(this)">Cancel Items</button>
                                                <% } %>
                                                
                                                <!-- Cancel Modal -->
                                                <div id="cancelOrderModal" class="cancel-modal-wrapper">
                                                    <div class="cancel-modal-box">
                                                        <span class="cancel-modal-close" onclick="closeCancelModal()">&times;</span>
                                                        <h2 class="cancel-modal-title">Cancel Order Items</h2>
                                                        <div id="cancelOrderItems" class="cancel-order-items-list"></div>
                                                        <textarea id="cancelReason" class="cancel-reason" placeholder="Enter the reason for cancellation"></textarea>
                                                        <button class="btn cancel-confirm-cancel-button" onclick="submitCancelRequest()">Submit</button>
                                                    </div>
                                                </div>
                                                
                                                
                                                

                                                    <% if (order.status=='Delivered' || order.status=='Partially Returned' ) { %>
                                                        <button class="btn cancel" data-order-id="<%= order._id %>"
                                                            data-order-items='<%= JSON.stringify(order.orderItems) %>'
                                                            onclick="returnOrder(this)">
                                                            Return Order
                                                        </button>

                                                        <% } %>

                                        </div>


                                        <% if (order.status==="Cancelled" && order.cancelMessage) { %>
                                            <p style="color: red;"><strong>Cancellation Reason:</strong>
                                                <%= order.cancelMessage %>
                                            </p>
                                            <% } %>

                                    </div>
                                </div>
                                <% }) %>
                                    <% } %>
                </div>
        </div>
        <!-- Return Order Modal -->
        <div id="returnOrderModal" class="return-modal">
            <div class="return-modal-content">
                <span class="return-close" onclick="closeReturnModal()">&times;</span>
                <h2 class="return-title">Return Products</h2>
                <p class="return-description">Select the products you want to return:</p>
        
                <form id="returnOrderForm">
                    <div id="returnOrderItems" class="return-items-container"></div>
        
                    <label for="returnReason" class="return-label">Return Reason:</label>
                    <textarea id="returnReason" name="returnReason" class="return-textarea" required></textarea>
        
                    <button type="submit" class="return-submit-btn">Submit Return Request</button>
                </form>
            </div>
        </div>


        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="#" class="page-link" data-page="<%= currentPage - 1 %>">Previous</a>
            <% } %>
        
            <% for (let i = 1; i <= totalPages; i++) { %>
                <a href="#" class="page-link <%= i === currentPage ? 'active' : '' %>" data-page="<%= i %>"><%= i %></a>
            <% } %>
        
            <% if (currentPage < totalPages) { %>
                <a href="#" class="page-link" data-page="<%= currentPage + 1 %>">Next</a>
            <% } %>
        </div>
        
        


        <%- include('../../views/partials/user/footer') %>

</body>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".page-link").forEach(link => {
        link.addEventListener("click", function (e) {
            e.preventDefault(); 

            let page = this.getAttribute("data-page");

            fetch(`/orders?page=${page}`)
                .then(response => response.text())
                .then(data => {
                    document.querySelector(".orders-container").innerHTML = 
                        new DOMParser().parseFromString(data, "text/html")
                        .querySelector(".orders-container").innerHTML;
                })
                .catch(error => console.error("Error fetching orders:", error));
        });
    });
});



//------------------------------------------------
  function openCancelModal(button) {
    const orderId = button.getAttribute("data-order-id");
    const orderItemsData = decodeURIComponent(button.getAttribute("data-order-items")); 

    console.log("Order ID:", orderId);
    console.log("Raw Order Items Data:", orderItemsData);

    let orderItems;
    try {
        orderItems = JSON.parse(orderItemsData);
        console.log("Parsed Order Items:", orderItems);
    } catch (error) {
        console.error("JSON Parse Error:", error);
        return;
    }

    const modal = document.getElementById("cancelOrderModal");
    const cancelOrderItems = document.getElementById("cancelOrderItems");

    if (!modal || !cancelOrderItems) {
        console.error("Modal or cancelOrderItems container not found!");
        return;
    }

    cancelOrderItems.innerHTML = "";


    orderItems
    .filter(item => item.status !== "Cancelled") 
    .forEach(item => {
        cancelOrderItems.innerHTML += `
            <div class="cancel-item">
                <input type="checkbox" class="cancel-checkbox" name="cancelItems" value="${item.product._id}">
                <span class="cancel-item-text">${item.product.productName} - â‚¹${item.product.salePrice} (Qty: ${item.quantity})</span>
            </div>
        `;
    });

    modal.setAttribute("data-order-id", orderId);

    modal.style.display = "flex";
}

function closeCancelModal() {
    const modal = document.getElementById("cancelOrderModal");
    if (modal) {
        modal.style.display = "none";
    }
}

// Close modal when clicking outside
window.onclick = function (event) {
    const modal = document.getElementById("cancelOrderModal");
    if (event.target === modal) {
        closeCancelModal();
    }
};

function submitCancelRequest() {
    const selectedProducts = [...document.querySelectorAll('input[name="cancelItems"]:checked')]
        .map(input => input.value);

    const cancelReason = document.getElementById("cancelReason").value.trim();

    if (selectedProducts.length === 0) {
        Swal.fire({
            icon: "warning",
            title: "No Items Selected",
            text: "Please select at least one product to cancel.",
        });
        return;
    }

    if (!cancelReason) {
        Swal.fire({
            icon: "warning",
            title: "Cancellation Reason Required",
            text: "Please provide a reason for cancellation.",
        });
        return;
    }

    const orderId = document.getElementById("cancelOrderModal").getAttribute("data-order-id");

    Swal.fire({
        title: "Confirm Cancellation?",
        text: "Are you sure you want to cancel the selected items?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, Cancel",
        cancelButtonText: "No",
    }).then((result) => {
        if (result.isConfirmed) {
            fetch("/order/cancel", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    orderId: orderId,
                    cancelItems: selectedProducts,
                    cancelReason
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Cancelled",
                        text: "Your selected items have been cancelled successfully.",
                    }).then(() => {
                        closeCancelModal();
                        location.reload(); 
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Cancellation Failed",
                        text: data.message,
                    });
                }
            })
            .catch(error => {
                console.error("Error cancelling items:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Something went wrong. Please try again.",
                });
            });
        }
    });
}


    //----------------------------------------------------
    function returnOrder(button) {
    const orderId = button.getAttribute("data-order-id");
    const orderItems = JSON.parse(button.getAttribute("data-order-items")); 

    const modal = document.getElementById("returnOrderModal");
    const returnOrderItems = document.getElementById("returnOrderItems");

    if (!modal || !returnOrderItems) {
        console.error("Modal or returnOrderItems container not found!");
        return;
    }

   
    returnOrderItems.innerHTML = "";

   
  orderItems.forEach(item => {
    if (item.status !== "Returned" || item.status=='Cancelled') {  
        returnOrderItems.innerHTML += `
            <div class="return-item">
                <input type="checkbox" class="return-checkbox" name="returnItems" value="${item.product._id}">
                <span class="return-item-text">${item.product.productName} - â‚¹${item.product.salePrice} (Qty: ${item.quantity})</span>
            </div>
        `;
    }
});


   
    document.getElementById("returnOrderForm").onsubmit = function (event) {
        event.preventDefault();

        const selectedProducts = [...document.querySelectorAll('input[name="returnItems"]:checked')]
                                    .map(input => input.value);

        if (selectedProducts.length === 0) {
            Swal.fire({
                icon: "warning",
                title: "No Products Selected",
                text: "Please select at least one product to return.",
            });
            return;
        }

        Swal.fire({
            title: "Submit Return Request?",
            text: "Are you sure you want to request a return for the selected product(s)?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, Submit",
        }).then((result) => {
            if (result.isConfirmed) {
                const returnReason = document.getElementById("returnReason").value;

                fetch("/order/return", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        orderId,
                        returnItems: selectedProducts,
                        returnReason
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Return Requested",
                            text: "Your return request has been submitted successfully.",
                        }).then(() => {
                            closeReturnModal();
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Request Failed",
                            text: data.message,
                        });
                    }
                })
                .catch(error => {
                    console.error("Error submitting return:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Something went wrong. Please try again.",
                    });
                });
            }
        });
    };

    modal.style.display = "flex";
}

// Close modal function
function closeReturnModal() {
    document.getElementById("returnOrderModal").style.display = "none";
}

// Close modal when clicking outside
window.onclick = function (event) {
    const modal = document.getElementById("returnOrderModal");
    if (event.target === modal) {
        closeReturnModal();
    }
};


</script>


</html>