<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MuscleBlaze</title>
    <link rel="stylesheet" href="styles.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="orders.css">
   
</head>

<body>
    <%- include('../../views/partials/user/header') %>

        <div class="profile-container">
            <%- include('../../views/partials/user/profileSidebar') %>

                <div class="orders-container">
                    <h1>Your Orders</h1>

                    <% if (orders.length===0) { %>
                        <p>No orders found.</p>
                        <% } else { %>
                            <% orders.forEach(order=> { %>
                                <div class="order-card">
                                    <!-- Left side: Products -->
                                    <div class="order-left">
                                        <% order.orderItems.forEach(item=> { %>
                                            <div class="product-info">
                                                <img src="<%= item.product.productImage && item.product.productImage.length > 0 ? item.product.productImage[0] : 'default-image.jpg' %>" 
     alt="<%= item.product.name %>"
     style="width: 150px; height: 150px; object-fit: cover; border-radius: 10px;">


                                                <div class="details">
                                                    <h4>
                                                        <%= item.product.productName %>
                                                    </h4>
                                                    <p><strong>Weight:</strong>
                                                        <%= item.product.size %>Kg
                                                    </p>
                                                    <p><strong>Flavor:</strong>
                                                        <%= item.product.flavor %>
                                                    </p>
                                                </div>
                                            </div>
                                            <% }) %>
                                    </div>


                                    <div class="order-right">
                                        <h4>Order ID: <%= order.orderId %>
                                        </h4>
                                        <p><strong>Status:</strong>
                                            <%= order.status %>
                                        </p>
                                        <p><strong>Total Items:</strong>
                                            <%= order.orderItems.reduce((total, item)=> total + item.quantity, 0) %>
                                        </p>
                                        <p><strong>Total Price:</strong> â‚¹<%= order.finalAmount %>
                                        </p>

                                        <div class="order-actions">

                                            <a href="/order/details/<%= order._id %>" class="btn">View Details</a>

                            

                                                <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Returned' && order.status !== 'Return Requested' && order.status !== 'Partially Returned' && order.status !== 'Failed') { %>
                                                    <button class="btn cancel-button"
                                                        data-order-id="<%= order._id %>"
                                                        data-order-items="<%- encodeURIComponent(JSON.stringify(order.orderItems)) %>"
                                                        onclick="openCancelModal(this)">Cancel Items</button>
                                                <% } %>


                                                <% if (order.status === 'Failed') { %>
                                                    <button class="btn retry-payment-button"
                                                        data-order-id="<%= order._id %>"
                                                        data-payment-method="<%= order.paymentMethod %>"
                                                        onclick="retryPayment(this)">
                                                        Retry Payment
                                                    </button>
                                                <% } %>
                                                
                                                <!-- Cancel Modal -->
                                                <div id="cancelOrderModal" class="cancel-modal-wrapper">
                                                    <div class="cancel-modal-box">
                                                        <span class="cancel-modal-close" onclick="closeCancelModal()">&times;</span>
                                                        <h2 class="cancel-modal-title">Cancel Order Items</h2>
                                                        <div id="cancelOrderItems" class="cancel-order-items-list"></div>
                                                        <textarea id="cancelReason" class="cancel-reason" placeholder="Enter the reason for cancellation"></textarea>
                                                        <button class="btn cancel-confirm-cancel-button" onclick="submitCancelRequest()">Submit</button>
                                                    </div>
                                                </div>
                                                
                                                
                                                

                                                    <% if (order.status=='Delivered' || order.status=='Partially Returned' ) { %>
                                                        <button class="btn cancel" data-order-id="<%= order._id %>"
                                                            data-order-items='<%= JSON.stringify(order.orderItems) %>'
                                                            onclick="returnOrder(this)">
                                                            Return Order
                                                        </button>

                                                        <% } %>

                                        </div>


                                        <% if (order.status==="Cancelled" && order.cancelMessage) { %>
                                            <p style="color: red;"><strong>Cancellation Reason:</strong>
                                                <%= order.cancelMessage %>
                                            </p>
                                            <% } %>

                                    </div>
                                </div>
                                <% }) %>
                                    <% } %>
                </div>
        </div>
        <!-- Return Order Modal -->
        <div id="returnOrderModal" class="return-modal">
            <div class="return-modal-content">
                <span class="return-close" onclick="closeReturnModal()">&times;</span>
                <h2 class="return-title">Return Products</h2>
                <p class="return-description">Select the products you want to return:</p>
        
                <form id="returnOrderForm">
                    <div id="returnOrderItems" class="return-items-container"></div>
        
                    <label for="returnReason" class="return-label">Return Reason:</label>
                    <textarea id="returnReason" name="returnReason" class="return-textarea" required></textarea>
        
                    <button type="submit" class="return-submit-btn">Submit Return Request</button>
                </form>
            </div>
        </div>

        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="#" class="page-link" data-page="<%= currentPage - 1 %>">Previous</a>
            <% } %>
        
            <% 
                let pagesToShow = 2; // Number of numbered pages to display
                let startPage = Math.max(1, currentPage - 1);
                let endPage = Math.min(totalPages, startPage + pagesToShow - 1);
        
                if (startPage > 1) { %>
                    <a href="#" class="page-link" data-page="1">1</a>
                    <% if (startPage > 2) { %> <span>...</span> <% } %>
            <% } %>
        
            <% for (let i = startPage; i <= endPage; i++) { %>
                <a href="#" class="page-link <%= i === currentPage ? 'active' : '' %>" data-page="<%= i %>"><%= i %></a>
            <% } %>
        
            <% if (endPage < totalPages) { %>
                <% if (endPage < totalPages - 1) { %> <span>...</span> <% } %>
                <a href="#" class="page-link" data-page="<%= totalPages %>"><%= totalPages %></a>
            <% } %>
        
            <% if (currentPage < totalPages) { %>
                <a href="#" class="page-link" data-page="<%= currentPage + 1 %>">Next</a>
            <% } %>
        </div>
        
        
        
        


        <%- include('../../views/partials/user/footer') %>

</body>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>

document.addEventListener("DOMContentLoaded", function () {
    function loadOrders(page) {
        fetch(`/orders?page=${page}`)
            .then(response => response.text())
            .then(data => {
                const parser = new DOMParser();
                const newDocument = parser.parseFromString(data, "text/html");
                document.querySelector(".orders-container").innerHTML = newDocument.querySelector(".orders-container").innerHTML;
                document.querySelector(".pagination").innerHTML = newDocument.querySelector(".pagination").innerHTML;
                addPaginationListeners(); // Reattach event listeners after content update
            })
            .catch(error => console.error("Error fetching orders:", error));
    }

    function addPaginationListeners() {
        document.querySelectorAll(".page-link").forEach(link => {
            link.addEventListener("click", function (e) {
                e.preventDefault();
                const page = this.getAttribute("data-page");
                loadOrders(page);
            });
        });
    }

    addPaginationListeners();
});



//------------------------------------------------
  function openCancelModal(button) {
    const orderId = button.getAttribute("data-order-id");
    const orderItemsData = decodeURIComponent(button.getAttribute("data-order-items")); 

    console.log("Order ID:", orderId);
    console.log("Raw Order Items Data:", orderItemsData);

    let orderItems;
    try {
        orderItems = JSON.parse(orderItemsData);
        console.log("Parsed Order Items:", orderItems);
    } catch (error) {
        console.error("JSON Parse Error:", error);
        return;
    }

    const modal = document.getElementById("cancelOrderModal");
    const cancelOrderItems = document.getElementById("cancelOrderItems");

    if (!modal || !cancelOrderItems) {
        console.error("Modal or cancelOrderItems container not found!");
        return;
    }

    cancelOrderItems.innerHTML = "";


    orderItems
    .filter(item => item.status !== "Cancelled") 
    .forEach(item => {
        cancelOrderItems.innerHTML += `
            <div class="cancel-item">
                <input type="checkbox" class="cancel-checkbox" name="cancelItems" value="${item.product._id}">
                <span class="cancel-item-text">${item.product.productName} - â‚¹${item.product.salePrice} (Qty: ${item.quantity})</span>
            </div>
        `;
    });

    modal.setAttribute("data-order-id", orderId);

    modal.style.display = "flex";
}

function closeCancelModal() {
    const modal = document.getElementById("cancelOrderModal");
    if (modal) {
        modal.style.display = "none";
    }
}

// Close modal when clicking outside
window.onclick = function (event) {
    const modal = document.getElementById("cancelOrderModal");
    if (event.target === modal) {
        closeCancelModal();
    }
};

function submitCancelRequest() {
    const selectedProducts = [...document.querySelectorAll('input[name="cancelItems"]:checked')]
        .map(input => input.value);

    const cancelReason = document.getElementById("cancelReason").value.trim();

    if (selectedProducts.length === 0) {
        Swal.fire({
            icon: "warning",
            title: "No Items Selected",
            text: "Please select at least one product to cancel.",
        });
        return;
    }

    if (!cancelReason) {
        Swal.fire({
            icon: "warning",
            title: "Cancellation Reason Required",
            text: "Please provide a reason for cancellation.",
        });
        return;
    }

    const orderId = document.getElementById("cancelOrderModal").getAttribute("data-order-id");

    Swal.fire({
        title: "Confirm Cancellation?",
        text: "Are you sure you want to cancel the selected items?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, Cancel",
        cancelButtonText: "No",
    }).then((result) => {
        if (result.isConfirmed) {
            fetch("/order/cancel", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    orderId: orderId,
                    cancelItems: selectedProducts,
                    cancelReason
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Cancelled",
                        text: "Your selected items have been cancelled successfully.",
                    }).then(() => {
                        closeCancelModal();
                        location.reload(); 
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Cancellation Failed",
                        text: data.message,
                    });
                }
            })
            .catch(error => {
                console.error("Error cancelling items:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Something went wrong. Please try again.",
                });
            });
        }
    });
}


    //----------------------------------------------------
    function returnOrder(button) {
    const orderId = button.getAttribute("data-order-id");
    const orderItems = JSON.parse(button.getAttribute("data-order-items")); 

    const modal = document.getElementById("returnOrderModal");
    const returnOrderItems = document.getElementById("returnOrderItems");

    if (!modal || !returnOrderItems) {
        console.error("Modal or returnOrderItems container not found!");
        return;
    }

   
    returnOrderItems.innerHTML = "";

   
  orderItems.forEach(item => {
    if (item.status !== "Returned" || item.status=='Cancelled') {  
        returnOrderItems.innerHTML += `
            <div class="return-item">
                <input type="checkbox" class="return-checkbox" name="returnItems" value="${item.product._id}">
                <span class="return-item-text">${item.product.productName} - â‚¹${item.product.salePrice} (Qty: ${item.quantity})</span>
            </div>
        `;
    }
});


   
    document.getElementById("returnOrderForm").onsubmit = function (event) {
        event.preventDefault();

        const selectedProducts = [...document.querySelectorAll('input[name="returnItems"]:checked')]
                                    .map(input => input.value);

        if (selectedProducts.length === 0) {
            Swal.fire({
                icon: "warning",
                title: "No Products Selected",
                text: "Please select at least one product to return.",
            });
            return;
        }

        Swal.fire({
            title: "Submit Return Request?",
            text: "Are you sure you want to request a return for the selected product(s)?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, Submit",
        }).then((result) => {
            if (result.isConfirmed) {
                const returnReason = document.getElementById("returnReason").value;

                fetch("/order/return", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        orderId,
                        returnItems: selectedProducts,
                        returnReason
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Return Requested",
                            text: "Your return request has been submitted successfully.",
                        }).then(() => {
                            closeReturnModal();
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Request Failed",
                            text: data.message,
                        });
                    }
                })
                .catch(error => {
                    console.error("Error submitting return:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Something went wrong. Please try again.",
                    });
                });
            }
        });
    };

    modal.style.display = "flex";
}

// Close modal function
function closeReturnModal() {
    document.getElementById("returnOrderModal").style.display = "none";
}

// Close modal when clicking outside
window.onclick = function (event) {
    const modal = document.getElementById("returnOrderModal");
    if (event.target === modal) {
        closeReturnModal();
    }
};
//-----------------------------------------------
function retryPayment(button) {
    const orderId = button.getAttribute("data-order-id");

    fetch("/payment/retry", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ orderId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const options = {
                key: "rzp_test_v6v5TA0H0GYZBO",
                amount: data.amount,
                currency: data.currency,
                order_id: data.razorpayOrderId,
                name: "Your Store Name",
                description: "Retry Payment",
                prefill: {
                    name: data.userName || "Guest User",
                    email: data.userEmail || "guest@example.com",
                    contact: data.userPhone || "0000000000"
                },
                handler: function (response) {
                    fetch("/payment/verify", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            orderId: data.orderId
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Payment Successful!',
                                text: 'Redirecting to order summary...',
                                showConfirmButton: false,
                                timer: 2000
                            });
                            setTimeout(() => window.location.href = `/order-summary/${data.orderId}`, 2000);
                        } else {
                            window.location.href = `/payment-failure?orderId=${data.orderId}&error=${encodeURIComponent(data.message || 'Verification failed')}`;
                        }
                    })
                    .catch(error => {
                        console.error("Verification Error:", error);
                        window.location.href = `/payment-failure?orderId=${data.orderId}&error=${encodeURIComponent('Verification error')}`;
                    });
                },
                modal: {
                    ondismiss: function () {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Payment Cancelled',
                            text: 'You closed the payment window.',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        });
                    }
                },
                method: {
                    netbanking: true,
                    card: true,
                    upi: true
                },
                retry: {
                    enabled: true,
                    max_count: 3
                },
                timeout: 600,
                theme: {
                    color: '#3399cc'
                }
            };

            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function (response) {
                console.error("Payment Failed:", response.error);
                const errorMsg = response.error.description || 'Payment failed';
                window.location.href = `/payment-failure?orderId=${data.orderId}&error=${encodeURIComponent(errorMsg)}`;
            });
            rzp.open();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Retry Failed',
                text: data.error || "Unable to retry payment",
                confirmButtonColor: '#d33',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error("Retry Error:", error);
        Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'Failed to initiate retry payment.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
        });
    });
}

</script>


</html>